# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
}

union Morph = Category | CategoryAggregator | CategoryConnection | CategoryConnectionCreatedAt | CategoryConnectionId | CategoryConnectionName | CategoryConnectionSlug | CategoryConnectionUpdatedAt | CategoryConnection_id | CategoryGroupBy | ComponentCustomCustomField | ComponentCustomDirection | ComponentCustomPhone | ComponentCustomProductoPedido | I18NLocale | Pedido | PedidoAggregator | PedidoAggregatorAvg | PedidoAggregatorMax | PedidoAggregatorMin | PedidoAggregatorSum | PedidoConnection | PedidoConnectionCliente | PedidoConnectionCostoEnvio | PedidoConnectionCreatedAt | PedidoConnectionDireccionEntrega | PedidoConnectionId | PedidoConnectionId_rastreo | PedidoConnectionPublished_at | PedidoConnectionTienda | PedidoConnectionUpdatedAt | PedidoConnection_id | PedidoGroupBy | Product | ProductAggregator | ProductAggregatorAvg | ProductAggregatorMax | ProductAggregatorMin | ProductAggregatorSum | ProductConnection | ProductConnectionCantidad | ProductConnectionCreatedAt | ProductConnectionDescripcion | ProductConnectionId | ProductConnectionImagen | ProductConnectionNombre | ProductConnectionPrecio | ProductConnectionPrecioVenta | ProductConnectionSlug | ProductConnectionStatus | ProductConnectionUpdatedAt | ProductConnection_id | ProductGroupBy | Store | StoreAggregator | StoreConnection | StoreConnectionAlias | StoreConnectionCreatedAt | StoreConnectionDireccion | StoreConnectionEncargado | StoreConnectionId | StoreConnectionPublished_at | StoreConnectionUpdatedAt | StoreConnection_id | StoreGroupBy | UploadFile | UploadFileAggregator | UploadFileAggregatorAvg | UploadFileAggregatorMax | UploadFileAggregatorMin | UploadFileAggregatorSum | UploadFileConnection | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionCreatedAt | UploadFileConnectionExt | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionHeight | UploadFileConnectionId | UploadFileConnectionMime | UploadFileConnectionName | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | UploadFileConnectionSize | UploadFileConnectionUpdatedAt | UploadFileConnectionUrl | UploadFileConnectionWidth | UploadFileConnection_id | UploadFileGroupBy | UserPermissionsPasswordPayload | UsersPermissionsLoginPayload | UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleAggregator | UsersPermissionsRoleConnection | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionType | UsersPermissionsRoleConnection_id | UsersPermissionsRoleGroupBy | UsersPermissionsUser | UsersPermissionsUserAggregator | UsersPermissionsUserConnection | UsersPermissionsUserConnectionBirthday | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionCreatedAt | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionProducts | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionRole | UsersPermissionsUserConnectionStore | UsersPermissionsUserConnectionStoryLife | UsersPermissionsUserConnectionUpdatedAt | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnection_id | UsersPermissionsUserGroupBy | createCategoryPayload | createPedidoPayload | createProductPayload | createRolePayload | createStorePayload | createUserPayload | deleteCategoryPayload | deleteFilePayload | deletePedidoPayload | deleteProductPayload | deleteRolePayload | deleteStorePayload | deleteUserPayload | updateCategoryPayload | updatePedidoPayload | updateProductPayload | updateRolePayload | updateStorePayload | updateUserPayload

type AdminUser {
  firstname: String!
  id: ID!
  lastname: String!
  username: String
}

type Category {
  _id: ID!
  createdAt: DateTime!
  id: ID!
  name: String
  productos(limit: Int, sort: String, start: Int, where: JSON): [Product]
  slug: String
  updatedAt: DateTime!
}

type CategoryAggregator {
  count: Int
  totalCount: Int
}

type CategoryConnection {
  aggregate: CategoryAggregator
  groupBy: CategoryGroupBy
  values: [Category]
}

type CategoryConnectionCreatedAt {
  connection: CategoryConnection
  key: DateTime
}

type CategoryConnectionId {
  connection: CategoryConnection
  key: ID
}

type CategoryConnectionName {
  connection: CategoryConnection
  key: String
}

type CategoryConnectionSlug {
  connection: CategoryConnection
  key: String
}

type CategoryConnectionUpdatedAt {
  connection: CategoryConnection
  key: DateTime
}

type CategoryConnection_id {
  connection: CategoryConnection
  key: ID
}

type CategoryGroupBy {
  _id: [CategoryConnection_id]
  createdAt: [CategoryConnectionCreatedAt]
  id: [CategoryConnectionId]
  name: [CategoryConnectionName]
  slug: [CategoryConnectionSlug]
  updatedAt: [CategoryConnectionUpdatedAt]
}

type ComponentCustomCustomField {
  _id: ID!
  id: ID!
  options: String
  required: Boolean
  title: String
}

type ComponentCustomDirection {
  _id: ID!
  calle: String
  colonia: String
  estado: String
  id: ID!
  lan: Float
  lat: Float
  municipio: String
  no_ext: Int
  no_int: Int
  referencia: String
}

type ComponentCustomPhone {
  _id: ID!
  id: ID!
  number: String
  type: ENUM_COMPONENTCUSTOMPHONE_TYPE
}

type ComponentCustomProductoPedido {
  Custom_field: [ComponentCustomCustomField]
  _id: ID!
  cantidad: Int
  categorias(limit: Int, sort: String, start: Int, where: JSON): [Category]
  descripcion: String
  id: ID!
  imagen: UploadFile
  nombre: String
  precio: Float
  precioVenta: Float
  productores(limit: Int, sort: String, start: Int, where: JSON): [UsersPermissionsUser]
  status: ENUM_COMPONENTCUSTOMPRODUCTOPEDIDO_STATUS
  tienda: Store
}

type I18NLocale {
  _id: ID!
  code: String
  createdAt: DateTime!
  id: ID!
  name: String
  updatedAt: DateTime!
}

type Mutation {
  createCategory(input: createCategoryInput): createCategoryPayload
  createPedido(input: createPedidoInput): createPedidoPayload
  createProduct(input: createProductInput): createProductPayload
  "Create a new role"
  createRole(input: createRoleInput): createRolePayload
  createStore(input: createStoreInput): createStorePayload
  "Create a new user"
  createUser(input: createUserInput): createUserPayload
  deleteCategory(input: deleteCategoryInput): deleteCategoryPayload
  "Delete one file"
  deleteFile(input: deleteFileInput): deleteFilePayload
  deletePedido(input: deletePedidoInput): deletePedidoPayload
  deleteProduct(input: deleteProductInput): deleteProductPayload
  "Delete an existing role"
  deleteRole(input: deleteRoleInput): deleteRolePayload
  deleteStore(input: deleteStoreInput): deleteStorePayload
  "Delete an existing user"
  deleteUser(input: deleteUserInput): deleteUserPayload
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
  forgotPassword(email: String!): UserPermissionsPasswordPayload
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  multipleUpload(field: String, files: [Upload]!, ref: String, refId: ID, source: String): [UploadFile]!
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  resetPassword(code: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  updateCategory(input: updateCategoryInput): updateCategoryPayload
  updateFileInfo(id: ID!, info: FileInfoInput!): UploadFile!
  updatePedido(input: updatePedidoInput): updatePedidoPayload
  updateProduct(input: updateProductInput): updateProductPayload
  "Update an existing role"
  updateRole(input: updateRoleInput): updateRolePayload
  updateStore(input: updateStoreInput): updateStorePayload
  "Update an existing user"
  updateUser(input: updateUserInput): updateUserPayload
  upload(field: String, file: Upload!, info: FileInfoInput, ref: String, refId: ID, source: String): UploadFile!
}

type Pedido {
  _id: ID!
  cliente: UsersPermissionsUser
  costoEnvio: Float
  createdAt: DateTime!
  direccionEntrega: ComponentCustomDirection
  id: ID!
  id_rastreo: String
  producto_pedido: [ComponentCustomProductoPedido]
  published_at: DateTime
  tienda: ComponentCustomDirection
  updatedAt: DateTime!
}

type PedidoAggregator {
  avg: PedidoAggregatorAvg
  count: Int
  max: PedidoAggregatorMax
  min: PedidoAggregatorMin
  sum: PedidoAggregatorSum
  totalCount: Int
}

type PedidoAggregatorAvg {
  costoEnvio: Float
}

type PedidoAggregatorMax {
  costoEnvio: Float
}

type PedidoAggregatorMin {
  costoEnvio: Float
}

type PedidoAggregatorSum {
  costoEnvio: Float
}

type PedidoConnection {
  aggregate: PedidoAggregator
  groupBy: PedidoGroupBy
  values: [Pedido]
}

type PedidoConnectionCliente {
  connection: PedidoConnection
  key: ID
}

type PedidoConnectionCostoEnvio {
  connection: PedidoConnection
  key: Float
}

type PedidoConnectionCreatedAt {
  connection: PedidoConnection
  key: DateTime
}

type PedidoConnectionDireccionEntrega {
  connection: PedidoConnection
  key: ID
}

type PedidoConnectionId {
  connection: PedidoConnection
  key: ID
}

type PedidoConnectionId_rastreo {
  connection: PedidoConnection
  key: String
}

type PedidoConnectionPublished_at {
  connection: PedidoConnection
  key: DateTime
}

type PedidoConnectionTienda {
  connection: PedidoConnection
  key: ID
}

type PedidoConnectionUpdatedAt {
  connection: PedidoConnection
  key: DateTime
}

type PedidoConnection_id {
  connection: PedidoConnection
  key: ID
}

type PedidoGroupBy {
  _id: [PedidoConnection_id]
  cliente: [PedidoConnectionCliente]
  costoEnvio: [PedidoConnectionCostoEnvio]
  createdAt: [PedidoConnectionCreatedAt]
  direccionEntrega: [PedidoConnectionDireccionEntrega]
  id: [PedidoConnectionId]
  id_rastreo: [PedidoConnectionId_rastreo]
  published_at: [PedidoConnectionPublished_at]
  tienda: [PedidoConnectionTienda]
  updatedAt: [PedidoConnectionUpdatedAt]
}

type Product {
  Custom_field: [ComponentCustomCustomField]
  _id: ID!
  cantidad: Int
  categorias(limit: Int, sort: String, start: Int, where: JSON): [Category]
  createdAt: DateTime!
  descripcion: String!
  id: ID!
  imagen: UploadFile
  nombre: String!
  precio: Float
  precioVenta: Float
  productores(limit: Int, sort: String, start: Int, where: JSON): [UsersPermissionsUser]
  slug: String
  status: ENUM_PRODUCT_STATUS!
  tiendas(limit: Int, sort: String, start: Int, where: JSON): [Store]
  updatedAt: DateTime!
}

type ProductAggregator {
  avg: ProductAggregatorAvg
  count: Int
  max: ProductAggregatorMax
  min: ProductAggregatorMin
  sum: ProductAggregatorSum
  totalCount: Int
}

type ProductAggregatorAvg {
  cantidad: Float
  precio: Float
  precioVenta: Float
}

type ProductAggregatorMax {
  cantidad: Float
  precio: Float
  precioVenta: Float
}

type ProductAggregatorMin {
  cantidad: Float
  precio: Float
  precioVenta: Float
}

type ProductAggregatorSum {
  cantidad: Float
  precio: Float
  precioVenta: Float
}

type ProductConnection {
  aggregate: ProductAggregator
  groupBy: ProductGroupBy
  values: [Product]
}

type ProductConnectionCantidad {
  connection: ProductConnection
  key: Int
}

type ProductConnectionCreatedAt {
  connection: ProductConnection
  key: DateTime
}

type ProductConnectionDescripcion {
  connection: ProductConnection
  key: String
}

type ProductConnectionId {
  connection: ProductConnection
  key: ID
}

type ProductConnectionImagen {
  connection: ProductConnection
  key: ID
}

type ProductConnectionNombre {
  connection: ProductConnection
  key: String
}

type ProductConnectionPrecio {
  connection: ProductConnection
  key: Float
}

type ProductConnectionPrecioVenta {
  connection: ProductConnection
  key: Float
}

type ProductConnectionSlug {
  connection: ProductConnection
  key: String
}

type ProductConnectionStatus {
  connection: ProductConnection
  key: String
}

type ProductConnectionUpdatedAt {
  connection: ProductConnection
  key: DateTime
}

type ProductConnection_id {
  connection: ProductConnection
  key: ID
}

type ProductGroupBy {
  _id: [ProductConnection_id]
  cantidad: [ProductConnectionCantidad]
  createdAt: [ProductConnectionCreatedAt]
  descripcion: [ProductConnectionDescripcion]
  id: [ProductConnectionId]
  imagen: [ProductConnectionImagen]
  nombre: [ProductConnectionNombre]
  precio: [ProductConnectionPrecio]
  precioVenta: [ProductConnectionPrecioVenta]
  slug: [ProductConnectionSlug]
  status: [ProductConnectionStatus]
  updatedAt: [ProductConnectionUpdatedAt]
}

type Query {
  categories(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [Category]
  categoriesConnection(limit: Int, sort: String, start: Int, where: JSON): CategoryConnection
  category(id: ID!, publicationState: PublicationState): Category
  files(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [UploadFile]
  filesConnection(limit: Int, sort: String, start: Int, where: JSON): UploadFileConnection
  me: UsersPermissionsMe
  pedido(id: ID!, publicationState: PublicationState): Pedido
  pedidos(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [Pedido]
  pedidosConnection(limit: Int, sort: String, start: Int, where: JSON): PedidoConnection
  product(id: ID!, publicationState: PublicationState): Product
  products(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [Product]
  productsConnection(limit: Int, sort: String, start: Int, where: JSON): ProductConnection
  role(id: ID!, publicationState: PublicationState): UsersPermissionsRole
  "Retrieve all the existing roles. You can't apply filters on this query."
  roles(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(limit: Int, sort: String, start: Int, where: JSON): UsersPermissionsRoleConnection
  store(id: ID!, publicationState: PublicationState): Store
  stores(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [Store]
  storesConnection(limit: Int, sort: String, start: Int, where: JSON): StoreConnection
  user(id: ID!, publicationState: PublicationState): UsersPermissionsUser
  users(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(limit: Int, sort: String, start: Int, where: JSON): UsersPermissionsUserConnection
}

type Store {
  _id: ID!
  alias: String
  createdAt: DateTime!
  direccion: ComponentCustomDirection
  encargado: UsersPermissionsUser
  id: ID!
  productos(limit: Int, sort: String, start: Int, where: JSON): [Product]
  published_at: DateTime
  updatedAt: DateTime!
}

type StoreAggregator {
  count: Int
  totalCount: Int
}

type StoreConnection {
  aggregate: StoreAggregator
  groupBy: StoreGroupBy
  values: [Store]
}

type StoreConnectionAlias {
  connection: StoreConnection
  key: String
}

type StoreConnectionCreatedAt {
  connection: StoreConnection
  key: DateTime
}

type StoreConnectionDireccion {
  connection: StoreConnection
  key: ID
}

type StoreConnectionEncargado {
  connection: StoreConnection
  key: ID
}

type StoreConnectionId {
  connection: StoreConnection
  key: ID
}

type StoreConnectionPublished_at {
  connection: StoreConnection
  key: DateTime
}

type StoreConnectionUpdatedAt {
  connection: StoreConnection
  key: DateTime
}

type StoreConnection_id {
  connection: StoreConnection
  key: ID
}

type StoreGroupBy {
  _id: [StoreConnection_id]
  alias: [StoreConnectionAlias]
  createdAt: [StoreConnectionCreatedAt]
  direccion: [StoreConnectionDireccion]
  encargado: [StoreConnectionEncargado]
  id: [StoreConnectionId]
  published_at: [StoreConnectionPublished_at]
  updatedAt: [StoreConnectionUpdatedAt]
}

type UploadFile {
  _id: ID!
  alternativeText: String
  caption: String
  createdAt: DateTime!
  ext: String
  formats: JSON
  hash: String!
  height: Int
  id: ID!
  mime: String!
  name: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related(limit: Int, sort: String, start: Int, where: JSON): [Morph]
  size: Float!
  updatedAt: DateTime!
  url: String!
  width: Int
}

type UploadFileAggregator {
  avg: UploadFileAggregatorAvg
  count: Int
  max: UploadFileAggregatorMax
  min: UploadFileAggregatorMin
  sum: UploadFileAggregatorSum
  totalCount: Int
}

type UploadFileAggregatorAvg {
  height: Float
  size: Float
  width: Float
}

type UploadFileAggregatorMax {
  height: Float
  size: Float
  width: Float
}

type UploadFileAggregatorMin {
  height: Float
  size: Float
  width: Float
}

type UploadFileAggregatorSum {
  height: Float
  size: Float
  width: Float
}

type UploadFileConnection {
  aggregate: UploadFileAggregator
  groupBy: UploadFileGroupBy
  values: [UploadFile]
}

type UploadFileConnectionAlternativeText {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionCaption {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionCreatedAt {
  connection: UploadFileConnection
  key: DateTime
}

type UploadFileConnectionExt {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionFormats {
  connection: UploadFileConnection
  key: JSON
}

type UploadFileConnectionHash {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionHeight {
  connection: UploadFileConnection
  key: Int
}

type UploadFileConnectionId {
  connection: UploadFileConnection
  key: ID
}

type UploadFileConnectionMime {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionName {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionPreviewUrl {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionProvider {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionProvider_metadata {
  connection: UploadFileConnection
  key: JSON
}

type UploadFileConnectionSize {
  connection: UploadFileConnection
  key: Float
}

type UploadFileConnectionUpdatedAt {
  connection: UploadFileConnection
  key: DateTime
}

type UploadFileConnectionUrl {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionWidth {
  connection: UploadFileConnection
  key: Int
}

type UploadFileConnection_id {
  connection: UploadFileConnection
  key: ID
}

type UploadFileGroupBy {
  _id: [UploadFileConnection_id]
  alternativeText: [UploadFileConnectionAlternativeText]
  caption: [UploadFileConnectionCaption]
  createdAt: [UploadFileConnectionCreatedAt]
  ext: [UploadFileConnectionExt]
  formats: [UploadFileConnectionFormats]
  hash: [UploadFileConnectionHash]
  height: [UploadFileConnectionHeight]
  id: [UploadFileConnectionId]
  mime: [UploadFileConnectionMime]
  name: [UploadFileConnectionName]
  previewUrl: [UploadFileConnectionPreviewUrl]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
  size: [UploadFileConnectionSize]
  updatedAt: [UploadFileConnectionUpdatedAt]
  url: [UploadFileConnectionUrl]
  width: [UploadFileConnectionWidth]
}

type UserPermissionsPasswordPayload {
  ok: Boolean!
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  blocked: Boolean
  confirmed: Boolean
  email: String!
  id: ID!
  role: UsersPermissionsMeRole
  username: String!
}

type UsersPermissionsMeRole {
  description: String
  id: ID!
  name: String!
  type: String
}

type UsersPermissionsPermission {
  _id: ID!
  action: String!
  controller: String!
  enabled: Boolean!
  id: ID!
  policy: String
  role: UsersPermissionsRole
  type: String!
}

type UsersPermissionsRole {
  _id: ID!
  description: String
  id: ID!
  name: String!
  permissions(limit: Int, sort: String, start: Int, where: JSON): [UsersPermissionsPermission]
  type: String
  users(limit: Int, sort: String, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleConnection {
  aggregate: UsersPermissionsRoleAggregator
  groupBy: UsersPermissionsRoleGroupBy
  values: [UsersPermissionsRole]
}

type UsersPermissionsRoleConnectionDescription {
  connection: UsersPermissionsRoleConnection
  key: String
}

type UsersPermissionsRoleConnectionId {
  connection: UsersPermissionsRoleConnection
  key: ID
}

type UsersPermissionsRoleConnectionName {
  connection: UsersPermissionsRoleConnection
  key: String
}

type UsersPermissionsRoleConnectionType {
  connection: UsersPermissionsRoleConnection
  key: String
}

type UsersPermissionsRoleConnection_id {
  connection: UsersPermissionsRoleConnection
  key: ID
}

type UsersPermissionsRoleGroupBy {
  _id: [UsersPermissionsRoleConnection_id]
  description: [UsersPermissionsRoleConnectionDescription]
  id: [UsersPermissionsRoleConnectionId]
  name: [UsersPermissionsRoleConnectionName]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
  _id: ID!
  birthday: Date
  blocked: Boolean
  confirmed: Boolean
  createdAt: DateTime!
  deliveryDirection: [ComponentCustomDirection]
  email: String!
  favoriteProducts(limit: Int, sort: String, start: Int, where: JSON): [Product]
  id: ID!
  pedidos(limit: Int, sort: String, start: Int, where: JSON): [Pedido]
  products: Product
  provider: String
  role: UsersPermissionsRole
  store: Store
  storyLife: String
  updatedAt: DateTime!
  username: String!
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserConnection {
  aggregate: UsersPermissionsUserAggregator
  groupBy: UsersPermissionsUserGroupBy
  values: [UsersPermissionsUser]
}

type UsersPermissionsUserConnectionBirthday {
  connection: UsersPermissionsUserConnection
  key: ID
}

type UsersPermissionsUserConnectionBlocked {
  connection: UsersPermissionsUserConnection
  key: Boolean
}

type UsersPermissionsUserConnectionConfirmed {
  connection: UsersPermissionsUserConnection
  key: Boolean
}

type UsersPermissionsUserConnectionCreatedAt {
  connection: UsersPermissionsUserConnection
  key: DateTime
}

type UsersPermissionsUserConnectionEmail {
  connection: UsersPermissionsUserConnection
  key: String
}

type UsersPermissionsUserConnectionId {
  connection: UsersPermissionsUserConnection
  key: ID
}

type UsersPermissionsUserConnectionProducts {
  connection: UsersPermissionsUserConnection
  key: ID
}

type UsersPermissionsUserConnectionProvider {
  connection: UsersPermissionsUserConnection
  key: String
}

type UsersPermissionsUserConnectionRole {
  connection: UsersPermissionsUserConnection
  key: ID
}

type UsersPermissionsUserConnectionStore {
  connection: UsersPermissionsUserConnection
  key: ID
}

type UsersPermissionsUserConnectionStoryLife {
  connection: UsersPermissionsUserConnection
  key: String
}

type UsersPermissionsUserConnectionUpdatedAt {
  connection: UsersPermissionsUserConnection
  key: DateTime
}

type UsersPermissionsUserConnectionUsername {
  connection: UsersPermissionsUserConnection
  key: String
}

type UsersPermissionsUserConnection_id {
  connection: UsersPermissionsUserConnection
  key: ID
}

type UsersPermissionsUserGroupBy {
  _id: [UsersPermissionsUserConnection_id]
  birthday: [UsersPermissionsUserConnectionBirthday]
  blocked: [UsersPermissionsUserConnectionBlocked]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  createdAt: [UsersPermissionsUserConnectionCreatedAt]
  email: [UsersPermissionsUserConnectionEmail]
  id: [UsersPermissionsUserConnectionId]
  products: [UsersPermissionsUserConnectionProducts]
  provider: [UsersPermissionsUserConnectionProvider]
  role: [UsersPermissionsUserConnectionRole]
  store: [UsersPermissionsUserConnectionStore]
  storyLife: [UsersPermissionsUserConnectionStoryLife]
  updatedAt: [UsersPermissionsUserConnectionUpdatedAt]
  username: [UsersPermissionsUserConnectionUsername]
}

type createCategoryPayload {
  category: Category
}

type createPedidoPayload {
  pedido: Pedido
}

type createProductPayload {
  product: Product
}

type createRolePayload {
  role: UsersPermissionsRole
}

type createStorePayload {
  store: Store
}

type createUserPayload {
  user: UsersPermissionsUser
}

type deleteCategoryPayload {
  category: Category
}

type deleteFilePayload {
  file: UploadFile
}

type deletePedidoPayload {
  pedido: Pedido
}

type deleteProductPayload {
  product: Product
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

type deleteStorePayload {
  store: Store
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

type updateCategoryPayload {
  category: Category
}

type updatePedidoPayload {
  pedido: Pedido
}

type updateProductPayload {
  product: Product
}

type updateRolePayload {
  role: UsersPermissionsRole
}

type updateStorePayload {
  store: Store
}

type updateUserPayload {
  user: UsersPermissionsUser
}

enum ENUM_COMPONENTCUSTOMPHONE_TYPE {
  cel
  landline
}

enum ENUM_COMPONENTCUSTOMPRODUCTOPEDIDO_STATUS {
  draft
  published
}

enum ENUM_PRODUCT_STATUS {
  draft
  published
}

enum PublicationState {
  LIVE
  PREVIEW
}

input CategoryInput {
  created_by: ID
  name: String
  productos: [ID]
  slug: String
  updated_by: ID
}

input ComponentCustomCustomFieldInput {
  options: String
  required: Boolean
  title: String
}

input ComponentCustomDirectionInput {
  calle: String
  colonia: String
  estado: String
  lan: Float
  lat: Float
  municipio: String
  no_ext: Int
  no_int: Int
  referencia: String
}

input ComponentCustomPhoneInput {
  number: String
  type: ENUM_COMPONENTCUSTOMPHONE_TYPE
}

input ComponentCustomProductoPedidoInput {
  Custom_field: [ComponentCustomCustomFieldInput]
  cantidad: Int
  categorias: [ID]
  descripcion: String
  imagen: ID
  nombre: String
  precio: Float
  precioVenta: Float
  productores: [ID]
  status: ENUM_COMPONENTCUSTOMPRODUCTOPEDIDO_STATUS
  tienda: ID
}

input FileInfoInput {
  alternativeText: String
  caption: String
  name: String
}

input FileInput {
  alternativeText: String
  caption: String
  created_by: ID
  ext: String
  formats: JSON
  hash: String!
  height: Int
  mime: String!
  name: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [ID]
  size: Float!
  updated_by: ID
  url: String!
  width: Int
}

input InputID {
  id: ID!
}

input LocaleInput {
  code: String
  created_by: ID
  name: String
  updated_by: ID
}

input PedidoInput {
  cliente: ID
  costoEnvio: Float
  created_by: ID
  direccionEntrega: ComponentCustomDirectionInput
  id_rastreo: String
  producto_pedido: [ComponentCustomProductoPedidoInput]
  published_at: DateTime
  tienda: ComponentCustomDirectionInput
  updated_by: ID
}

input ProductInput {
  Custom_field: [ComponentCustomCustomFieldInput]
  cantidad: Int
  categorias: [ID]
  created_by: ID
  descripcion: String!
  imagen: ID
  nombre: String!
  precio: Float
  precioVenta: Float
  productores: [ID]
  slug: String
  status: ENUM_PRODUCT_STATUS
  tiendas: [ID]
  updated_by: ID
}

input RoleInput {
  created_by: ID
  description: String
  name: String!
  permissions: [ID]
  type: String
  updated_by: ID
  users: [ID]
}

input StoreInput {
  alias: String
  created_by: ID
  direccion: ComponentCustomDirectionInput
  encargado: ID
  productos: [ID]
  published_at: DateTime
  updated_by: ID
}

input UserInput {
  birthday: Date
  blocked: Boolean
  confirmationToken: String
  confirmed: Boolean
  created_by: ID
  deliveryDirection: [ComponentCustomDirectionInput]
  email: String!
  favoriteProducts: [ID]
  password: String
  pedidos: [ID]
  products: ID
  provider: String
  resetPasswordToken: String
  role: ID
  store: ID
  storyLife: String
  updated_by: ID
  username: String!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

input UsersPermissionsRegisterInput {
  email: String!
  password: String!
  username: String!
}

input createCategoryInput {
  data: CategoryInput
}

input createPedidoInput {
  data: PedidoInput
}

input createProductInput {
  data: ProductInput
}

input createRoleInput {
  data: RoleInput
}

input createStoreInput {
  data: StoreInput
}

input createUserInput {
  data: UserInput
}

input deleteCategoryInput {
  where: InputID
}

input deleteFileInput {
  where: InputID
}

input deletePedidoInput {
  where: InputID
}

input deleteProductInput {
  where: InputID
}

input deleteRoleInput {
  where: InputID
}

input deleteStoreInput {
  where: InputID
}

input deleteUserInput {
  where: InputID
}

input editCategoryInput {
  created_by: ID
  name: String
  productos: [ID]
  slug: String
  updated_by: ID
}

input editComponentCustomCustomFieldInput {
  id: ID
  options: String
  required: Boolean
  title: String
}

input editComponentCustomDirectionInput {
  calle: String
  colonia: String
  estado: String
  id: ID
  lan: Float
  lat: Float
  municipio: String
  no_ext: Int
  no_int: Int
  referencia: String
}

input editComponentCustomPhoneInput {
  id: ID
  number: String
  type: ENUM_COMPONENTCUSTOMPHONE_TYPE
}

input editComponentCustomProductoPedidoInput {
  Custom_field: [editComponentCustomCustomFieldInput]
  cantidad: Int
  categorias: [ID]
  descripcion: String
  id: ID
  imagen: ID
  nombre: String
  precio: Float
  precioVenta: Float
  productores: [ID]
  status: ENUM_COMPONENTCUSTOMPRODUCTOPEDIDO_STATUS
  tienda: ID
}

input editFileInput {
  alternativeText: String
  caption: String
  created_by: ID
  ext: String
  formats: JSON
  hash: String
  height: Int
  mime: String
  name: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  related: [ID]
  size: Float
  updated_by: ID
  url: String
  width: Int
}

input editLocaleInput {
  code: String
  created_by: ID
  name: String
  updated_by: ID
}

input editPedidoInput {
  cliente: ID
  costoEnvio: Float
  created_by: ID
  direccionEntrega: editComponentCustomDirectionInput
  id_rastreo: String
  producto_pedido: [editComponentCustomProductoPedidoInput]
  published_at: DateTime
  tienda: editComponentCustomDirectionInput
  updated_by: ID
}

input editProductInput {
  Custom_field: [editComponentCustomCustomFieldInput]
  cantidad: Int
  categorias: [ID]
  created_by: ID
  descripcion: String
  imagen: ID
  nombre: String
  precio: Float
  precioVenta: Float
  productores: [ID]
  slug: String
  status: ENUM_PRODUCT_STATUS
  tiendas: [ID]
  updated_by: ID
}

input editRoleInput {
  created_by: ID
  description: String
  name: String
  permissions: [ID]
  type: String
  updated_by: ID
  users: [ID]
}

input editStoreInput {
  alias: String
  created_by: ID
  direccion: editComponentCustomDirectionInput
  encargado: ID
  productos: [ID]
  published_at: DateTime
  updated_by: ID
}

input editUserInput {
  birthday: Date
  blocked: Boolean
  confirmationToken: String
  confirmed: Boolean
  created_by: ID
  deliveryDirection: [editComponentCustomDirectionInput]
  email: String
  favoriteProducts: [ID]
  password: String
  pedidos: [ID]
  products: ID
  provider: String
  resetPasswordToken: String
  role: ID
  store: ID
  storyLife: String
  updated_by: ID
  username: String
}

input updateCategoryInput {
  data: editCategoryInput
  where: InputID
}

input updatePedidoInput {
  data: editPedidoInput
  where: InputID
}

input updateProductInput {
  data: editProductInput
  where: InputID
}

input updateRoleInput {
  data: editRoleInput
  where: InputID
}

input updateStoreInput {
  data: editStoreInput
  where: InputID
}

input updateUserInput {
  data: editUserInput
  where: InputID
}


"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON

"A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar DateTime

"A time string with format: HH:mm:ss.SSS"
scalar Time

"A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar Date

"The `Long` scalar type represents 52-bit integers"
scalar Long

"The `Upload` scalar type represents a file upload."
scalar Upload
